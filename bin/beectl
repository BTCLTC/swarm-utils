#!/bin/sh

# ###########################################################
# 使用前配置 
AH_ArgsMeta="
# Usage: beestatus <cmd> [OPTIONS]...
# Args:
#   cmd:                    ### run { address | peers | balance | settlements | uncashed | cashout }
# [cashout]
+   -m, --min-amount        ### min amount in cashout
#
?   -h, --help              ### display this help and exit
?   -v, --version           ### output version information and exit
"  # 参数元数据配置
AH_ShowHelp="--help"  # 输出帮助信息的指令参数(可省略)
AH_DefaultHelpMeta="no"  # 因为AH_ArgsMeta中已经配置了--help和--version，无须使用默认配置
AH_ShowVersion="--version"  # 输出版本信息的指令参数（可省略）
AH_VersionInfo="version: 0.0.1, copyright by yaoming (2021)"  # 自定义版本信息（可省略）
AH_StrictParam="no"  # 不使用严格参数（支持以"-"开头的参数）
AH_LeastParamCount=0  # 参数数量不得少于1个（0表示不验证最少数量）

# ###########################################################
# 引入工具文件（这里按实际目录结构引入）
source `dirname $0`/../shell-utils/lib/args-helper 
source /etc/profile

# 用户检测
if [ `whoami` != "root" ]; then
    echo "Must run by root user."
    exit 1
fi

# 环境变量检测
if [ -z "$BEE_WORK_DIR" ]; then
    source /etc/profile
    if [ -z "$BEE_WORK_DIR" ]; then
        echo "BEE_WORK_DIR has not in /etc/profile, pleash install bee at first."
        exit 1
    fi
fi

# 导入库
source `dirname $0`/../lib/runtime_funcs.sh
source `dirname $0`/../lib/cashout_funcs.sh

PIX=10000000000000000
# 获得参数
cmd="${AH_PARAMS[0]}"

configs=$(getRuntimeConfigFiles)

function beeAddress() {
    echo "+-------+--------------------------------------------+--------------------------------------------+"
    printf "| %-5s | %-42s | %-42s |\n" "PORT" "ETHEREUM_ADDRESS" "CHEQUEBOOK_ADDRESS"
    echo "+-------+--------------------------------------------+--------------------------------------------+"
    for c in $configs; do
        debug_api_port="$(getDebugApiPort """$c""")"
        debug_api_url="$(getDebugApi """$c""")/addresses"
        json="$(curl -s $debug_api_url)"
        ccc="$?"
        ETHEREUM_ADDRESS=""
        if [ "$ccc" == "0" ]; then 
            ETHEREUM_ADDRESS=$(echo """$json""" | jq -r '.ethereum')
        fi
        debug_api_url="$(getDebugApi """$c""")/chequebook/address"
        json="$(curl -s $debug_api_url)"
        ccc="$?"
        CHEQUEBOOK_ADDRESS=""
        if [ "$ccc" == "0" ]; then 
            CHEQUEBOOK_ADDRESS=$(echo """$json""" | jq -r '.chequebookaddress')
        fi
        printf "| %-5s | %-42s | %-42s |\n" "$debug_api_port" $ETHEREUM_ADDRESS $CHEQUEBOOK_ADDRESS
    done
    echo "+-------+--------------------------------------------+--------------------------------------------+"
}


function peers() {
    echo "+-------+-------+"
    printf "| %-5s | %5s |\n" "PORT" "PEERS"
    echo "+-------+-------+"
    for c in $configs; do
        debug_api_url="$(getDebugApi """$c""")/peers"
        debug_api_port="$(getDebugApiPort """$c""")"
        json="$(curl -s $debug_api_url)"
        ccc="$?"
        if [ "$ccc" == "0" ]; then
            peers=$(echo """$json""" | jq | grep address | wc -l)
            printf "| %-5s | %5d |\n" "$debug_api_port" "$peers"
        else
            printf "| %-5s | %5s |\n" "$debug_api_port" "-"
        fi
    done
   echo "+-------+-------+"
}

function balance() {
    echo "+-------+------------------------+------------------------+"
    printf "| %-5s | %22s | %22s |\n" "PORT" "TOTAL_BALANCE" "AVAILABLE_BALANCE"
    echo "+-------+------------------------+------------------------+"
    for c in $configs; do
        debug_api_url="$(getDebugApi """$c""")/chequebook/balance"
        debug_api_port="$(getDebugApiPort """$c""")"
        json="$(curl -s $debug_api_url)"
        ccc="$?"
        if [ "$ccc" == "0" ]; then
            totalBalance=$(echo """$json""" | jq ".totalBalance | (./$PIX)")
            availableBalance=$(echo """$json""" | jq ".availableBalance | (./$PIX)")
            printf "| %-5s | %22.16f | %22.16f |\n" "$debug_api_port" $totalBalance $availableBalance
        else
            printf "| %-5s | %22s | %22s |\n" "$debug_api_port" "unknow" "unknow"
        fi
    done
    echo "+-------+------------------------+------------------------+"
}

function settlements() {
    echo "+-------+------------------------+------------------------+"
    printf "| %-5s | %22s | %22s |\n" "PORT" "TOTAL_RECEIVED" "TOTAL_SENT"
    echo "+-------+------------------------+------------------------+"
    for c in $configs; do
        debug_api_url="$(getDebugApi """$c""")/settlements"
        debug_api_port="$(getDebugApiPort """$c""")"
        json="$(curl -s $debug_api_url)"
        ccc="$?"
        if [ "$ccc" == "0" ]; then
            totalreceived=$(echo """$json""" | jq ".totalreceived | (./$PIX)")
            totalsent=$(echo """$json""" | jq ".totalsent | (./$PIX)")
            trs=""
            tss=""
            if [ `expr $totalreceived \> 0` -eq 1 ]; then
                trs=$(printf "\033[0;31m%22.16f\033[0;0m" $totalreceived)
            else
                trs=$(printf "%22.16f" $totalreceived)
            fi
            if [ `expr $totalsent \> 0` -eq 1 ]; then
                tss=$(printf "\033[0;32m%22.16f\033[0;0m" $totalsent)
            else
                tss=$(printf "%22.16f" $totalsent)
            fi
            printf "| %-5s | %s | %s |\n" "$debug_api_port" "$trs" "$tss"
        else
            printf "| %-5s | %22s | %22s |\n" "$debug_api_port" "unknow" "unknow"
        fi
    done
    echo "+-------+------------------------+------------------------+"
}

function uncashed() {
    echo "+-------+------------+------------------------+"
    printf "| %-5s | %10s | %22s |\n" "PORT" "PEERS" "AMOUNT"
    echo "+-------+------------+------------------------+"
    for c in $configs; do
        DEBUG_API=$(getDebugApi $c)
        debug_api_port="$(getDebugApiPort """$c""")"
        eval $(listAllUncashed | awk -v pix=$PIX '
            BEGIN {
                count = 0;
                sum = 0;
            }
            {
                count += 1;
                sum += $2 / pix;
            }
            END {
                print "uncashed_count="count;
                print "uncashed_sum="sum;
            }
        ')
        local uss=""
        if [ `expr $uncashed_sum \> 0` -eq 1 ]; then
            uss=$(printf "\033[0;31m%22.16f\033[0;0m" $uncashed_sum)
        else
            uss=$(printf "%22.16f" $uncashed_sum)
        fi
        printf "| %-5s | %10d | %22s |\n" "$debug_api_port" "$uncashed_count" "$uss"
    done
    echo "+-------+------------+------------------------+"
}

function cashoutPort() {
    local port=$1
    if [ -z "$port" ]; then
        echo please input port or 'all'.
        return 1
    fi
    minAmount=$2
    if [ -z "$minAmount" ]; then
        minAmount=$PIX
    else
        minAmount=$(expr "$minAmount" \* "$PIX")
    fi
    for c in $configs; do
        DEBUG_API=$(getDebugApi $c)
        debug_api_port="$(getDebugApiPort """$c""")"
        if [ "$port" == "all" -o "$debug_api_port" == "$port" ]; then
            echo "["`date '+%Y-%m-%d %H:%M:%S'`"]" "Cashout at port [$debug_api_port]..."
            cashoutAll "$minAmount" 2>&1 | awk '{print "    "$0}'
        fi
    done
}

if [ "$cmd" == "address" ]; then
    beeAddress
elif [ "$cmd" == "peers" ]; then
    peers
elif [ "$cmd" == "balance" ]; then
    balance
elif [ "$cmd" == "settlements" ]; then
    settlements
elif [ "$cmd" == "uncashed" ]; then
    uncashed
elif [ "$cmd" == "cashout" ]; then
    port="${AH_PARAMS[1]}"
    minAmount="${AH_OPTIONS['-m']}"
    cashoutPort $port $minAmount
else
    AH_PrintHelp
fi